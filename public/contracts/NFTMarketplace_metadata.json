{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "style_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "minStyleNFTs_",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "minStyleAssets_",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "stable_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "mana_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "weth_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "dclAdmin_",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "AlreadyListed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "AlreadyPayed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DCLImproperStatusPayer",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DerivativesDisallowed",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "admin",
						"type": "address"
					}
				],
				"name": "DisallowedAdmin",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "environment",
						"type": "address"
					}
				],
				"name": "DisallowedEnvironment",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "paymentToken",
						"type": "address"
					}
				],
				"name": "DisallowedPaymentToken",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ETHTransferFailed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ImproperItemStatus",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "ImproperOwnerOfStake",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ImproperRoyalties",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recoveredAdmin",
						"type": "address"
					}
				],
				"name": "ImproperSignature",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "LackOfDerivatives",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "LowAmount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NoStakes",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotAdmin",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotBridgeRouter",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotContractOwner",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotDCLLot",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotDerivative",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "payment",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "paymentToken",
						"type": "address"
					}
				],
				"name": "NotERC20Lisiting",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "payment",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "paymentToken",
						"type": "address"
					}
				],
				"name": "NotETHLisiting",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotEnoughtSTYLETokens",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "NotListed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "payment",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "paymentToken",
						"type": "address"
					}
				],
				"name": "PriceNotMet",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Reentrancy",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TooLowPrice",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "TransferFailed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "isZeroAddress",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "admin",
						"type": "address"
					}
				],
				"name": "AddAdmin",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "environment",
						"type": "address"
					}
				],
				"name": "AddEnvironment",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "paymentToken",
						"type": "address"
					}
				],
				"name": "AddPaymentToken",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "adminSignature",
						"type": "bytes"
					}
				],
				"name": "DCLInit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "contract_",
						"type": "address"
					}
				],
				"name": "GenerationMint",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "buyer",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "contract_",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ItemBuy",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "buyer",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "contract_",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ItemBuyAndMint",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "contract_",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "ItemCancel",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "seller",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "contract_",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "payment",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "paymentToken",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "environment",
						"type": "address"
					}
				],
				"name": "ItemList",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "redeemer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "contract_",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "voucherURI",
						"type": "string"
					}
				],
				"name": "NFTMint",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "signer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "redeemer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "contract_",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "voucherURI",
						"type": "string"
					}
				],
				"name": "NFTRedeem",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "admin",
						"type": "address"
					}
				],
				"name": "RemoveAdmin",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "environment",
						"type": "address"
					}
				],
				"name": "RemoveEnvironment",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "paymentToken",
						"type": "address"
					}
				],
				"name": "RemovePaymentToken",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "string",
						"name": "purpose",
						"type": "string"
					}
				],
				"name": "Staked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					}
				],
				"name": "Unstaked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint16",
						"name": "environmentRoyaltyPercent",
						"type": "uint16"
					},
					{
						"indexed": true,
						"internalType": "uint16",
						"name": "stakeOwnerRoyaltyPercent",
						"type": "uint16"
					},
					{
						"indexed": true,
						"internalType": "uint80",
						"name": "tailorRoyaltyStable",
						"type": "uint80"
					},
					{
						"indexed": false,
						"internalType": "uint16",
						"name": "tailorRoyaltyPercent",
						"type": "uint16"
					}
				],
				"name": "UpdateRoyalties",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Withdraw",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "admin",
						"type": "address"
					}
				],
				"name": "addAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "redeemer",
								"type": "address"
							},
							{
								"components": [
									{
										"internalType": "address",
										"name": "tokenAddress",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "tokenId",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "payment",
										"type": "uint256"
									},
									{
										"internalType": "address",
										"name": "paymentToken",
										"type": "address"
									},
									{
										"internalType": "string",
										"name": "uri",
										"type": "string"
									},
									{
										"internalType": "address",
										"name": "bidder",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "environment",
										"type": "address"
									},
									{
										"internalType": "uint96",
										"name": "metaverseId",
										"type": "uint96"
									},
									{
										"internalType": "bytes",
										"name": "signature",
										"type": "bytes"
									}
								],
								"internalType": "struct ILazyMintingStructs.NonmintedNFT",
								"name": "nonmintedNFT",
								"type": "tuple"
							},
							{
								"internalType": "bytes",
								"name": "signature",
								"type": "bytes"
							},
							{
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}
						],
						"internalType": "struct INFTMarketplaceStructs.RequstedData[]",
						"name": "requestedDataArr",
						"type": "tuple[]"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "contract_",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							}
						],
						"internalType": "struct INFTMarketplaceStructs.ListedData[]",
						"name": "listedDataArr",
						"type": "tuple[]"
					}
				],
				"name": "batchBuy",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "redeemer",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "tokenAddress",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "payment",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "paymentToken",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "uri",
								"type": "string"
							},
							{
								"internalType": "address",
								"name": "bidder",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "environment",
								"type": "address"
							},
							{
								"internalType": "uint96",
								"name": "metaverseId",
								"type": "uint96"
							},
							{
								"internalType": "bytes",
								"name": "signature",
								"type": "bytes"
							}
						],
						"internalType": "struct ILazyMintingStructs.NonmintedNFT",
						"name": "nonmintedNFT",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "buyAndMint",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "redeemer",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "tokenAddress",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "payment",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "paymentToken",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "uri",
								"type": "string"
							},
							{
								"internalType": "address",
								"name": "bidder",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "environment",
								"type": "address"
							},
							{
								"internalType": "uint96",
								"name": "metaverseId",
								"type": "uint96"
							},
							{
								"internalType": "bytes",
								"name": "signature",
								"type": "bytes"
							}
						],
						"internalType": "struct ILazyMintingStructs.NonmintedNFT",
						"name": "nonmintedNFT",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "DCLSignature",
						"type": "bytes"
					}
				],
				"name": "buyDCL",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenAmount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "tokenAddress",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "payment",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "paymentToken",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "uri",
								"type": "string"
							},
							{
								"internalType": "address",
								"name": "bidder",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "environment",
								"type": "address"
							},
							{
								"internalType": "uint96",
								"name": "metaverseId",
								"type": "uint96"
							},
							{
								"internalType": "bytes",
								"name": "signature",
								"type": "bytes"
							}
						],
						"internalType": "struct ILazyMintingStructs.NonmintedNFT",
						"name": "nonmintedNFT",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "buyDCLInit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "contract_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "buyItem",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "contract_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "cancelListing",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "cursor",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "howMany",
						"type": "uint256"
					}
				],
				"name": "getAdmins",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "admins",
						"type": "address[]"
					},
					{
						"internalType": "uint256",
						"name": "newCursor",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "contract_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getAncestor",
				"outputs": [
					{
						"internalType": "address",
						"name": "ancestor",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes",
						"name": "adminSignature",
						"type": "bytes"
					}
				],
				"name": "getDCLLotInfo",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "contract_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getListing",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "payment",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "seller",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "contract_",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "paymentToken",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "environment",
								"type": "address"
							}
						],
						"internalType": "struct INFTMarketplaceStructs.Listing",
						"name": "listing",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "cursor",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "howMany",
						"type": "uint256"
					}
				],
				"name": "getListings",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "payment",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "seller",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "contract_",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "paymentToken",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "environment",
								"type": "address"
							}
						],
						"internalType": "struct INFTMarketplaceStructs.Listing[]",
						"name": "listings",
						"type": "tuple[]"
					},
					{
						"internalType": "uint256",
						"name": "newCursor",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getNumberOfStakeCalls",
				"outputs": [
					{
						"internalType": "uint80",
						"name": "numberOfStakeCalls",
						"type": "uint80"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint80",
						"name": "cursor",
						"type": "uint80"
					},
					{
						"internalType": "uint80",
						"name": "howMany",
						"type": "uint80"
					}
				],
				"name": "getStakes",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "tokenAddress",
								"type": "address"
							},
							{
								"internalType": "uint96",
								"name": "numberOfDerivatives",
								"type": "uint96"
							},
							{
								"internalType": "address",
								"name": "stakeOwner",
								"type": "address"
							},
							{
								"internalType": "enum IStakingStructs.StakeStatus",
								"name": "status",
								"type": "uint8"
							},
							{
								"internalType": "string",
								"name": "purpose",
								"type": "string"
							}
						],
						"internalType": "struct IStakingStructs.Stake[]",
						"name": "stakes",
						"type": "tuple[]"
					},
					{
						"internalType": "uint80",
						"name": "newCursor",
						"type": "uint80"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint80",
						"name": "cursor",
						"type": "uint80"
					},
					{
						"internalType": "uint80",
						"name": "howMany",
						"type": "uint80"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "getStakesByOwner",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "tokenAddress",
								"type": "address"
							},
							{
								"internalType": "uint96",
								"name": "numberOfDerivatives",
								"type": "uint96"
							},
							{
								"internalType": "address",
								"name": "stakeOwner",
								"type": "address"
							},
							{
								"internalType": "enum IStakingStructs.StakeStatus",
								"name": "status",
								"type": "uint8"
							},
							{
								"internalType": "string",
								"name": "purpose",
								"type": "string"
							}
						],
						"internalType": "struct IStakingStructs.Stake[]",
						"name": "stakes",
						"type": "tuple[]"
					},
					{
						"internalType": "uint80",
						"name": "newCursor",
						"type": "uint80"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "contract_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getTailor",
				"outputs": [
					{
						"internalType": "address",
						"name": "tailor",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getUsersDCLInitLots",
				"outputs": [
					{
						"internalType": "bytes32[]",
						"name": "dclInitLots",
						"type": "bytes32[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "contract_",
						"type": "address"
					}
				],
				"name": "isDerivative",
				"outputs": [
					{
						"internalType": "bool",
						"name": "result",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "contract_",
						"type": "address"
					}
				],
				"name": "isGeneration",
				"outputs": [
					{
						"internalType": "bool",
						"name": "result",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "contract_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "payment",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "paymentToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "environment",
						"type": "address"
					}
				],
				"name": "listItem",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "redeemer",
						"type": "address"
					},
					{
						"internalType": "uint96",
						"name": "metaverseId",
						"type": "uint96"
					},
					{
						"internalType": "string",
						"name": "tokenURI",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					}
				],
				"name": "mint",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "tokenURI",
						"type": "string"
					},
					{
						"internalType": "uint96",
						"name": "numberOfDerivatives",
						"type": "uint96"
					},
					{
						"internalType": "string",
						"name": "purpose",
						"type": "string"
					},
					{
						"components": [
							{
								"internalType": "uint16",
								"name": "environmentRoyaltyPercent",
								"type": "uint16"
							},
							{
								"internalType": "uint16",
								"name": "stakeOwnerRoyaltyPercent",
								"type": "uint16"
							},
							{
								"internalType": "uint80",
								"name": "tailorRoyaltyStable",
								"type": "uint80"
							},
							{
								"internalType": "uint16",
								"name": "tailorRoyaltyPercent",
								"type": "uint16"
							}
						],
						"internalType": "struct IStakingStructs.Royalties",
						"name": "royalties_",
						"type": "tuple"
					}
				],
				"name": "mintGenerationAndStake",
				"outputs": [
					{
						"internalType": "address",
						"name": "clone",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC721Received",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "hash",
						"type": "bytes4"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "admin",
						"type": "address"
					}
				],
				"name": "removeAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "bridgeRouter_",
						"type": "address"
					}
				],
				"name": "setBridgeRouter",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "dclAdmin_",
						"type": "address"
					}
				],
				"name": "setDCLAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint96",
						"name": "numberOfDerivatives",
						"type": "uint96"
					},
					{
						"internalType": "string",
						"name": "purpose",
						"type": "string"
					},
					{
						"components": [
							{
								"internalType": "uint16",
								"name": "environmentRoyaltyPercent",
								"type": "uint16"
							},
							{
								"internalType": "uint16",
								"name": "stakeOwnerRoyaltyPercent",
								"type": "uint16"
							},
							{
								"internalType": "uint80",
								"name": "tailorRoyaltyStable",
								"type": "uint80"
							},
							{
								"internalType": "uint16",
								"name": "tailorRoyaltyPercent",
								"type": "uint16"
							}
						],
						"internalType": "struct IStakingStructs.Royalties",
						"name": "royalties_",
						"type": "tuple"
					}
				],
				"name": "stake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "unstake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "contract_",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "newPayment",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "newPaymentToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "newEnvironment",
						"type": "address"
					}
				],
				"name": "updateListing",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "minStyleAssets_",
						"type": "uint256"
					}
				],
				"name": "updateMinStyleAssets",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "minStyleNFTs_",
						"type": "uint256"
					}
				],
				"name": "updateMinStyleNFTs",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint16",
								"name": "environmentRoyaltyPercent",
								"type": "uint16"
							},
							{
								"internalType": "uint16",
								"name": "stakeOwnerRoyaltyPercent",
								"type": "uint16"
							},
							{
								"internalType": "uint80",
								"name": "tailorRoyaltyStable",
								"type": "uint80"
							},
							{
								"internalType": "uint16",
								"name": "tailorRoyaltyPercent",
								"type": "uint16"
							}
						],
						"internalType": "struct IStakingStructs.Royalties",
						"name": "royalties_",
						"type": "tuple"
					}
				],
				"name": "updateRoyalties",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"addAdmin(address)": {
					"details": "Add admin (only by contract owner).",
					"params": {
						"admin": "Address of admin."
					}
				},
				"buyAndMint(address,(address,uint256,uint256,address,string,address,address,uint96,bytes),bytes,uint256)": {
					"details": "Buy item with eth and mint it.",
					"params": {
						"nonmintedNFT": "NonmintedNFT to buy and mint.",
						"signature": "Signature for nonmintedNFT by creator of the item."
					}
				},
				"buyItem(address,uint256,uint256)": {
					"details": "Buy item.",
					"params": {
						"amount": "Amount of payment tokens to transfer (optional for eth buy).",
						"tokenId": "A tokenId of ERC721 to buy."
					}
				},
				"cancelListing(address,uint256)": {
					"details": "Cancel listing.",
					"params": {
						"tokenId": "A tokenId of ERC721 to cancel listing of."
					}
				},
				"getAdmins(uint256,uint256)": {
					"details": "Get admins."
				},
				"getAncestor(address,uint256)": {
					"params": {
						"tokenId": "A tokenId of ERC721 to get info about."
					}
				},
				"getListing(address,uint256)": {
					"details": "Get listing by tokenId.",
					"params": {
						"tokenId": "A tokenId of ERC721 to get info about."
					}
				},
				"getListings(uint256,uint256)": {
					"details": "Get all listings."
				},
				"getNumberOfStakeCalls()": {
					"details": "Get number of stake calls",
					"returns": {
						"numberOfStakeCalls": "numberOfStakeCalls"
					}
				},
				"getOwner()": {
					"details": "Get owner of the contract."
				},
				"getStakes(uint80,uint80)": {
					"details": "Get all stakes.",
					"returns": {
						"newCursor": "for subsequental calls",
						"stakes": "stakes"
					}
				},
				"getTailor(address,uint256)": {
					"params": {
						"tokenId": "A tokenId of ERC721 to get info about."
					}
				},
				"isDerivative(address)": {
					"details": "Determine if the contract is the derivative.",
					"params": {
						"contract_": "A contract_ to get info about."
					}
				},
				"listItem(address,uint256,uint256,address,address)": {
					"details": "List item.",
					"params": {
						"payment": "Setted price at paymentTokens.",
						"paymentToken": "Address of paymentToken.",
						"tokenId": "A tokenId of ERC721 to get info about."
					}
				},
				"onERC721Received(address,address,uint256,bytes)": {
					"details": "See {ERC721A__IERC721Receiver-onERC721Received}."
				},
				"removeAdmin(address)": {
					"details": "Remove admin (only by contract owner).",
					"params": {
						"admin": "Address of admin."
					}
				},
				"stake(address,uint256,uint96,string,(uint16,uint16,uint80,uint16))": {
					"details": "Stake a token.",
					"params": {
						"purpose": "Purpose of staking.",
						"tokenAddress": "Address of ERC721 collection.",
						"tokenId": "The tokenId of ERC721 to stake."
					}
				},
				"unstake(address,uint256)": {
					"details": "Unstake a token.",
					"params": {
						"tokenAddress": "Address of ERC721 collection.",
						"tokenId": "The tokenId of ERC721 to unstake."
					}
				},
				"updateListing(address,uint256,uint256,address,address)": {
					"details": "Update listing.",
					"params": {
						"newPayment": "New setted price at paymentTokens.",
						"newPaymentToken": "New address of paymentToken.",
						"tokenId": "A tokenId of ERC721 to get info about."
					}
				},
				"updateRoyalties((uint16,uint16,uint80,uint16))": {
					"details": "Update royalties."
				},
				"withdraw(address,uint256)": {
					"details": "Withdraw tokens from contract (only by contract owner).",
					"params": {
						"token": "Address of token to withdraw."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"getAncestor(address,uint256)": {
					"notice": "Return ancestor by tokenId."
				},
				"getTailor(address,uint256)": {
					"notice": "Return tailor by tokenId."
				},
				"stake(address,uint256,uint96,string,(uint16,uint16,uint80,uint16))": {
					"notice": "The ERC721 have to be approved to this contract."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/NFTMarketplace.sol": "NFTMarketplace"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 1000
		},
		"remappings": [],
		"viaIR": true
	},
	"sources": {
		"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
			"keccak256": "0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e",
			"license": "MIT",
			"urls": [
				"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497",
				"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
			"keccak256": "0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3",
			"license": "MIT",
			"urls": [
				"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4",
				"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt"
			]
		},
		"@openzeppelin/contracts/proxy/Clones.sol": {
			"keccak256": "0xae614c6b103b743c62e9544632f7ef4fc8950de4e9c783d2e765a3b86701dda3",
			"license": "MIT",
			"urls": [
				"bzz-raw://1840012075b9b05caa02da1b16d2d2662b2c383feb3169c8159fd8deb4840f5c",
				"dweb:/ipfs/QmPj63a7JH3aAqVj1wvkuGEdth7s9f33vK26A5aE9k23S4"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3",
			"license": "MIT",
			"urls": [
				"bzz-raw://6f2cf1c531122bc7ca96b8c8db6a60deae60441e5223065e792553d4849b5638",
				"dweb:/ipfs/QmPBdJmBBABMDCfyDjCbdxgiqRavgiSL88SYPGibgbPas9"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
			"keccak256": "0x84ac2d2f343df1e683da7a12bbcf70db542a7a7a0cea90a5d70fcb5e5d035481",
			"license": "MIT",
			"urls": [
				"bzz-raw://73ae8e0c6f975052973265113d762629002ce33987b1933c2a378667e2816f2f",
				"dweb:/ipfs/QmQAootkVfoe4PLaYbT4Xob2dJRm3bZfbCffEHRbCYXNPF"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
			"keccak256": "0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7",
			"license": "MIT",
			"urls": [
				"bzz-raw://8bc00ab7f133cdaafd212a5cc6a16c8d37319721105d130c8e5af0c4e8f170ba",
				"dweb:/ipfs/QmVmf6LVMfFiEkvKYLzSv3bGHzymEW93AcUuFrNUdY3NtT"
			]
		},
		"@uniswap/swap-router-contracts/contracts/interfaces/IV3SwapRouter.sol": {
			"keccak256": "0xa2300af2b82af292216a8f3f301a86e65463655fff9fb791515e3fd2ccf4a14c",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://a0a9bece58527fb5c1773d86666c7a71884a78f413e230dfa8c8a7f8ea564ef9",
				"dweb:/ipfs/QmbDhvpoZJN1KntxUUxkYV89RPTwqVBiyHBkvVh4QHSveo"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
			"keccak256": "0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://1c42b9e6f5902ac38dd43e25750939baa7e0c1425dc75afd717c4412731065d5",
				"dweb:/ipfs/QmWaoacnzsucTvBME2o7YgZBZMhaHv7fkj83htHMVWJKWh"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
			"keccak256": "0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652",
				"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
			"keccak256": "0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://982f4328f956c3e60e67501e759eb292ac487f76460c774c50e9ae4fcc92aae5",
				"dweb:/ipfs/QmRnzEDsaqtd9PJEVcgQi7p5aV5pMSvRUoGZJAdwFUJxgZ"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
			"keccak256": "0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://8febc9bdb399a4d94bb89f5377732652e2400e4a8dee808201ade6848f9004e7",
				"dweb:/ipfs/QmaKDqYYFU4d2W2iN77aDHptfbFmYZRrMYXHeGpJmM8C1c"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
			"keccak256": "0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://d0b571930cc7488b1d546a7e9cea7c52d8b3c4e207da657ed0e0db7343b8cd03",
				"dweb:/ipfs/QmaGK6vVwB95QSTR1XMYvrh7ivYAYZxi3fD7v6VMA4jZ39"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
			"keccak256": "0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://b99c8c9ae8e27ee6559e5866bea82cbc9ffc8247f8d15b7422a4deb287d4d047",
				"dweb:/ipfs/QmfL8gaqt3ffAnm6nVj5ksuNpLygXuL3xq5VBqrkwC2JJ3"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
			"keccak256": "0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://64144fb96e1c7fdba87305acadb98a198d26a3d46c097cb3a666e567f6f29735",
				"dweb:/ipfs/QmUnWVwN9FKB9uV5Pr8YfLpWZnYM2DENnRMaadZ492JS9u"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
			"keccak256": "0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://ed63907c38ff36b0e22bc9ffc53e791ea74f0d4f0e7c257fdfb5aaf8825b1f0f",
				"dweb:/ipfs/QmSQrckghEjs6HVsA5GVgpNpZWvTXMY5eQLF7cN6deFeEg"
			]
		},
		"contracts/Base.sol": {
			"keccak256": "0xdea62c50a4904fd84f7c0f660497c4839499684125065a55654586251b6981dc",
			"license": "MIT",
			"urls": [
				"bzz-raw://6ea7467a7d8f94be1814b8f1052becea9b402b526d9d04177dbeef5dc3c70bd1",
				"dweb:/ipfs/QmZyHSK5BcFRYLwc5D8NWd6AKdiJDxmwmgWP6b1rDiWbdw"
			]
		},
		"contracts/Bidding3.sol": {
			"keccak256": "0x76e51d1512700500b7c4b6a99fe6a642986cc8b10876801ab752fed4ee6f4514",
			"license": "MIT",
			"urls": [
				"bzz-raw://9c65a15acd182facab0600ad38711b6677f898bbd8933ace567c0d7d2e28c5f5",
				"dweb:/ipfs/QmceDGdqFUEZgjhf9vgs2Cushk26ZKhwgvgyTRMKvsd6iT"
			]
		},
		"contracts/Generation.sol": {
			"keccak256": "0xceda89d4bbd22db1a517aec75a73b5b9cfea2d99b2613ee3cf20899163267fb8",
			"license": "MIT",
			"urls": [
				"bzz-raw://2d8737e43af7683d038ec623e6ba3d2083cb2655b14af85ce7eae9e4ddb1611e",
				"dweb:/ipfs/QmUHuytMnRs4hcrqBAagzrMG1VHqNXkhb68UQ3zcCuCvYi"
			]
		},
		"contracts/LazyMinting2.sol": {
			"keccak256": "0x878fd5ef4eafb3a6b44ae7be852b95c6fbf657bb7198b96ede132d5055d2e3b6",
			"license": "MIT",
			"urls": [
				"bzz-raw://e5a92755137b15799e3d1537ae784f0692eae28cf0ffe1da4a1eb60c42f9a829",
				"dweb:/ipfs/QmX3WDWPr5LQoqRAbyWnb84fJwSXvS56w7ipypcEkdovZ2"
			]
		},
		"contracts/NFTMarketplace.sol": {
			"keccak256": "0x9d2da65ad7ec526c650eb782f5f4fed6a830e4ca426f0e8d5591f6d254313188",
			"license": "MIT",
			"urls": [
				"bzz-raw://b99c096c63a642f44053b1218c57dbbdd1d599a07e7182c8ed706a084e2d469e",
				"dweb:/ipfs/QmaGDtJZA5yLU6WRNCYZ42b1GK8X5WXHQ3S3f3cFVmjvfc"
			]
		},
		"contracts/Staking.sol": {
			"keccak256": "0xa9ba8e776b891ba192612f31ce2466b5627ef8386552ae15f4cebe10d62c6172",
			"license": "MIT",
			"urls": [
				"bzz-raw://ce2fc06e2201ded4d4aa544be8ecb173ab8bc5d9691457dfa69942656843444e",
				"dweb:/ipfs/QmPpktNmeh9UdHTgMJ1j7JqagQo9MB3ZUb1DmLSY4294Mx"
			]
		},
		"contracts/erc721a/ERC721A.sol": {
			"keccak256": "0x98ac4cb4a5897da4f64c8fb3e536b56bf35479cdac186e742103f2a013f370eb",
			"license": "MIT",
			"urls": [
				"bzz-raw://27952dcd03d74f3f5cc07f4db6a6a567313139e6c17202a40b8a8688ca462487",
				"dweb:/ipfs/QmdbbgES96KyRaXeX5mw7rff94rVjhk1kfryQiqnxAFqJ7"
			]
		},
		"contracts/erc721a/IERC721A.sol": {
			"keccak256": "0xb3ca7a5b922adc4d69f06971f078e1fc317241a23c349db3cd01b1acc3990916",
			"license": "MIT",
			"urls": [
				"bzz-raw://cad124c4ba158c20b3858aa1d48bf82b7f6f6ce930a0092d9728cc94592d0836",
				"dweb:/ipfs/Qmdr46mwaoNbTtLp45RBBed3s47beg18dnZXnjqvJHp7gU"
			]
		},
		"contracts/interfaces/IBase.sol": {
			"keccak256": "0x94e2ccd9bbf22f244933d5ff82e1ed8674967947b308a443d913ddd45ad438dc",
			"license": "MIT",
			"urls": [
				"bzz-raw://68c7202a7183150fd589f71da6bb1f62d27aef92e2e1d7ffd5119806930b8f50",
				"dweb:/ipfs/QmYywCBgMRs6V4WAaskyVTnCawp4A5ZKCHRbgHDphJ78CA"
			]
		},
		"contracts/interfaces/IERC721Custom.sol": {
			"keccak256": "0xd02fd207dbec2207c73226cecee87a80bf9faf365247834a75f8bcbbb3f456cf",
			"license": "MIT",
			"urls": [
				"bzz-raw://8bdea6eb53e0de919c87decd88392e0eb975c1a292f2aff21fc40c22dd6fa37c",
				"dweb:/ipfs/QmeXxJcQkoWyH9VNWQtqo1srrgqpyjwAqEdJRDzAFyrL8a"
			]
		},
		"contracts/interfaces/IGeneration.sol": {
			"keccak256": "0x9d642722580df0b683e06cee092250be26580c56dde7f897e7af7beb875d9fa9",
			"license": "MIT",
			"urls": [
				"bzz-raw://fa50e848f369d66a66bbfdfbd1d97725d7106a5082c1e7a8c468db1f7b93d00f",
				"dweb:/ipfs/QmX5teWXTiSBiokMa8PNTJ3FpRx29dDiUauQC8yfkodqMb"
			]
		},
		"contracts/interfaces/ILazyMinting.sol": {
			"keccak256": "0xb4937a0828ce9a3cc91c7ca5b8051b9d6a4895b0311a6b08ce30d6ab8d13a366",
			"license": "MIT",
			"urls": [
				"bzz-raw://c59ef0bc070d718abd26d5106e2962b00b5801cca04be0372de24c1055c844bf",
				"dweb:/ipfs/Qmb3JDt6LCQgsit5hEevPSJxtaXw1tkjcLx4R4FLY99uFK"
			]
		},
		"contracts/interfaces/INFTMarketplace.sol": {
			"keccak256": "0x1d41fdf0796ad6fd13852b287979d89c790469728d6c8cd9394272c05b628050",
			"license": "MIT",
			"urls": [
				"bzz-raw://afd46f9b6b8bcc34371068131bf1e24466b0588dcefb6cf622c1466043b4859a",
				"dweb:/ipfs/QmdcJQCmy4ds5mUofyNNzCYvb7P8w6EQwfaKBigJYmJkEG"
			]
		},
		"contracts/interfaces/IStaking.sol": {
			"keccak256": "0xc2b9dcaa748af7b1abf552d34a820755b3b9a98b832380d03e513321b278c370",
			"license": "MIT",
			"urls": [
				"bzz-raw://5251f76b39d7efd27d240599cddc1c3936929b7eb65e5a9a9674e59a41422490",
				"dweb:/ipfs/QmYPBr9bMkZWA65PQhj5Bg9qJERPY9r6SFFWLARWRc6tzY"
			]
		},
		"contracts/interfaces/IWETH9.sol": {
			"keccak256": "0xbd077cf9a91dd3cd17420baeb7b59c14ec84fec3fe5a4f0ad41757bc43fb76bf",
			"license": "MIT",
			"urls": [
				"bzz-raw://999e7f9e731ae6e88b084d239b3bb5df84f699dc55384eedb2ddc027626dace7",
				"dweb:/ipfs/QmXPbCCUorRLBq26PQUVU9CPDYcT5Hb9HCSTeJvTHHBGKG"
			]
		},
		"contracts/interfaces/base/IBaseErrors.sol": {
			"keccak256": "0xcba7a5c3df98f9dfbf53cc3208f1ec51624f1ef00df9e0d05a8ab2bf5115e1af",
			"license": "MIT",
			"urls": [
				"bzz-raw://651cbb794605024939f59471f4ebde13d90abfc99a580868f623395a6bb6a1d3",
				"dweb:/ipfs/QmPXYv5i5Zq3ESG9zEgLXSp3nH1uHsgA2digqrPqiwfGEd"
			]
		},
		"contracts/interfaces/base/IBaseEvents.sol": {
			"keccak256": "0x7fee8c82dbc78fb7d200c2c477652d99992ca5ea8f07b65ebaa0450e9d159c68",
			"license": "MIT",
			"urls": [
				"bzz-raw://130e9bc013d70fcb7d3bd40bc853052d2b6529bbc2754199147bc1069487f910",
				"dweb:/ipfs/QmWc4VuCUojdpMvSnJKBn3tayMC6mUAHmthVNfKXeHknNt"
			]
		},
		"contracts/interfaces/base/IBaseStructs.sol": {
			"keccak256": "0xb228611a68f78eb33d753ac64603c566d7507c738c62195ed107ae77f7ba0cee",
			"license": "MIT",
			"urls": [
				"bzz-raw://4f151eab783d6332988cb75fa501181965fcb874eb94a59150ce0f82bc4da6b4",
				"dweb:/ipfs/QmZgZnzPSohcMTASseET5JbdQuj3UzN6UZZitBDfUz7AtN"
			]
		},
		"contracts/interfaces/generation/IGenerationErrors.sol": {
			"keccak256": "0x183f5f1300953b14429ac4e321a60e404db0c1e70a21863a3e1354f455a59275",
			"license": "MIT",
			"urls": [
				"bzz-raw://95f0359bf0853fdbe519bd24ae01bcc0472cb78132061a128d00ef36d6cb4c32",
				"dweb:/ipfs/QmPVGHS7C6soZaoC7Po4zEtkZ4uQEjDhBMiwwiT2zMFbXc"
			]
		},
		"contracts/interfaces/generation/IGenerationEvents.sol": {
			"keccak256": "0x40384fdf8fb893da10cbfd1792f3402c08d4fe404929b50146712cd8bc82300d",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a3e53d764a3f92c056191fa0c49911abf110614b70fa28861828235e7a79494",
				"dweb:/ipfs/QmapyizRT2oVXExUPXgVfrqmfhNgiKEV5rw7wm9vu4uuWr"
			]
		},
		"contracts/interfaces/generation/IGenerationStructs.sol": {
			"keccak256": "0x1f214bd4ccb4963b9a7b5a8e42291d2b660d6fcd8e15bf4338d3885f2a1c876a",
			"license": "MIT",
			"urls": [
				"bzz-raw://50538d6acf128bd5c86f6e0f11e8c3f08642aebffb6c0e327f6f331e281e6d86",
				"dweb:/ipfs/QmcxoZPcjhTXBngyeuLcWooYHMemqDPqUNPfNbYqmQxqEr"
			]
		},
		"contracts/interfaces/lazyminting/ILazyMintingErrors.sol": {
			"keccak256": "0x8ee6aa584a114acfdd13c412507a01425987c362735088d997a50c5b6cdde998",
			"license": "MIT",
			"urls": [
				"bzz-raw://8b42bf0b294aeecb72cdca37bae1e85f2cac115f177de3c71aac8745382a92e9",
				"dweb:/ipfs/QmeRT8ezZyBYaGGcQVRZsoPcgBS9mmhxDfK7BuTNou4C9k"
			]
		},
		"contracts/interfaces/lazyminting/ILazyMintingEvents.sol": {
			"keccak256": "0x5126a6f2e9b795df11f95ac5b766439739fa844dc46870975545406117de01e9",
			"license": "MIT",
			"urls": [
				"bzz-raw://4b0154f9595e63fd4bb6869236db6a21ba8084dfa1f117541eae1389081fed8e",
				"dweb:/ipfs/QmaX7UBXkWGiSXWRAAsu8ZzEiQ1KDdyPLJWsuExxuyqDHF"
			]
		},
		"contracts/interfaces/lazyminting/ILazyMintingStructs.sol": {
			"keccak256": "0xa9aea54eac9816c070fa680e216bb7d3fb868bcd3881107fd2372d06dae8fe23",
			"license": "MIT",
			"urls": [
				"bzz-raw://a16783b012db4235d87cf5e11acef2f5cb51e6e068b69ecd57ed0ff5d5899e2b",
				"dweb:/ipfs/QmRUkbt3ZNzdXCsDh973u7NWQrmsCmYUs4dCZJuA8tYNrk"
			]
		},
		"contracts/interfaces/nftmarketplace/INFTMarketplaceErrors.sol": {
			"keccak256": "0x1702a7d683f8d9bac5ad110244d107c7a3c77f8c5c3aacc2b475a906fd46d6d6",
			"license": "MIT",
			"urls": [
				"bzz-raw://c844335d5881e3067f72bcbddb3344838247e93a7a1e54088b711ce897b70f4e",
				"dweb:/ipfs/QmZpMb86cqLqCsWuqmNgA1wskP3hRUeQF1keUt4q2Jtawr"
			]
		},
		"contracts/interfaces/nftmarketplace/INFTMarketplaceEvents.sol": {
			"keccak256": "0x1974db3b28ea6343d97aa267b45b421fa250f0aff6ae27448af31f84122a5051",
			"license": "MIT",
			"urls": [
				"bzz-raw://a9011c1eb160ad590d394d42b9e8e293c5b230ea0ea8a6d7c7ac2d24c6d54c9d",
				"dweb:/ipfs/QmUwp8dhBYpkox122uw1vQ1VCdENcKPQUw1btv5RKw2nNp"
			]
		},
		"contracts/interfaces/nftmarketplace/INFTMarketplaceStructs.sol": {
			"keccak256": "0xd17813597e73d6168c7f9fb0c8a1b7b050652664429950bbfff510158549bece",
			"license": "MIT",
			"urls": [
				"bzz-raw://7644aa3227e9f85a5073fcdadbc4944c7726c958b84b7dfa58cf4d7a90746e09",
				"dweb:/ipfs/QmWSkKAbo49powr7ag1FaqpsSXa6KE6pYkL1XLfjchbiNa"
			]
		},
		"contracts/interfaces/staking/IStakingErrors.sol": {
			"keccak256": "0x8671f6dbffe4e6852ff6f9a38df2ccbcd91a517bcb95d8e08a4a56bb7faae65c",
			"license": "MIT",
			"urls": [
				"bzz-raw://173c6d646d36420b4bb6c116a3aaec0dfe47428a11f04b0aee6e36462bbc79d6",
				"dweb:/ipfs/QmWLBLCwEKwayCCi61hW5zNu13ii8XS9LdFzTWFsnHrjHP"
			]
		},
		"contracts/interfaces/staking/IStakingEvents.sol": {
			"keccak256": "0xd0fd06ff969dd12a5fa875a048105f37a70fb5c64e421710f2c5abf36d19f005",
			"license": "MIT",
			"urls": [
				"bzz-raw://02056104b307367cb815f63a6588ccd19134116964dfac93d20b9589976bb9d4",
				"dweb:/ipfs/QmcbWDqXw8cQP6Jrqw8XyCu9bggfccbuVg3RSELofMTB4F"
			]
		},
		"contracts/interfaces/staking/IStakingStructs.sol": {
			"keccak256": "0x675bae4dfa261dc6595ef6191a0758fc7a861df80228a8fdd9321138b1275aa8",
			"license": "MIT",
			"urls": [
				"bzz-raw://dca10c52e359e9481be9388966931d5434d0014828bf9405b794d2dea3724189",
				"dweb:/ipfs/QmXjZp3a1j8i9na81fW1PyqwjipnMvqnoA4imPhDaU5tJt"
			]
		},
		"contracts/libraries/ERC20.sol": {
			"keccak256": "0x2ebfe61aef5c5e298c9be2045f157ec9b887e5c461a1c2645d8c7e283d486ec5",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://15cfc912abdf175cb51e2c9ff38d6aa28e7dc588935055162f310d3e0847ebb7",
				"dweb:/ipfs/QmXLpj3frHJDzu7UhQ5MS8hAuUz9TnMNE5GGBF2V24vVzj"
			]
		},
		"contracts/libraries/FixedPointMathLib.sol": {
			"keccak256": "0x4c130af14e262eda78f2e19f8f2e9e6556ab79527faca04914625f2edb75f19e",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://e75d3242a2efc2663fb8931c26ab0340dead1b9e1a621a82fe279fb6171af33e",
				"dweb:/ipfs/QmX66NvofDaHwCb47novU2FsDZU5ucwFUgJeDDE4T5SoJA"
			]
		},
		"contracts/libraries/PoolAddress.sol": {
			"keccak256": "0x13514a8b7e1fbc42db76e0cf4ff612ed7752efc5c62bb6cb9b8983c84e638ccd",
			"license": "MIT",
			"urls": [
				"bzz-raw://8f967f227ee1f4666cc8ddef4e7db47036c04d3f381e20aceea5f57350247489",
				"dweb:/ipfs/Qmc4pzsz4CH6y2Kzk2y4hw9Umq2uJmxixg2YfPHhfHwwdJ"
			]
		},
		"contracts/libraries/ReentrancyGuard.sol": {
			"keccak256": "0x4dd1073a7d66c3a87ae2805bd2bfbb6c73df38e4391976dc69d0db2e3e2ee31e",
			"license": "MIT",
			"urls": [
				"bzz-raw://082ffd69f1df3d453b77f85973f6628a22e58984baa993fbd088cc1c94bf8a05",
				"dweb:/ipfs/QmfTyQ2iGcChT7RHF7JSaCLemdXztJDiM7nd4HfWjs4bpp"
			]
		},
		"contracts/libraries/SafeTransferLib.sol": {
			"keccak256": "0xe08ac600da6fea048cf1c7fd35b7b2080f3ece69cf2890ac78fb5960c42ca8dc",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://240556bb1fefc669e95b2f16bdda5b3482a9d5d64bd96cbe24b58e2483d419b9",
				"dweb:/ipfs/QmVZy6P4xM6dacMvf5uLVFT8PT9Akr9x7Asr1PTnyKPNth"
			]
		},
		"erc721a/contracts/IERC721A.sol": {
			"keccak256": "0x9c94731c43a2320e54f9128ad972659b07536d908bc08490213616e2dc26dea9",
			"license": "MIT",
			"urls": [
				"bzz-raw://8b48d00b493a1573e0378a69740c88280835515dec1360394a708e20df36bc27",
				"dweb:/ipfs/QmZqvycpgbLJ3oeBqhNTExQeqNtBx97kBkt9xSESjTrgq2"
			]
		},
		"hardhat/console.sol": {
			"keccak256": "0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4",
			"license": "MIT",
			"urls": [
				"bzz-raw://a8cb8681076e765c214e0d51cac989325f6b98e315eaae06ee0cbd5a9f084763",
				"dweb:/ipfs/QmNWGHi4zmjxQTYN3NMGnJd49jBT5dE4bxTdWEaDuJrC6N"
			]
		},
		"solady/src/utils/LibString.sol": {
			"keccak256": "0x1aeed89e393350c7b015f9e77dd360f64427e059442833bf6647f34a535e1b42",
			"license": "MIT",
			"urls": [
				"bzz-raw://71de991154b5c4963fedfdd73b77eeb2f0a01ebdad2ca8cacfd354aea7467d70",
				"dweb:/ipfs/QmPe4ttUtoApXsBunEbXmemhZTbNd1eXYr5evQEqNkHvcY"
			]
		}
	},
	"version": 1
}