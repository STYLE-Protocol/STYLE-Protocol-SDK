{
	"compiler": {
		"version": "0.8.19+commit.7dd6d404"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "style_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "stable_",
						"type": "address"
					},
					{
						"internalType": "address payable",
						"name": "weth_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "dclAdmin_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenStaking_",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "DCLLot",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DerivativesDisallowed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DisallowedAdmin",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "DisallowedModelId",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ImproperItemStatus",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ImproperMetaverseIds",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ImproperOwnerOfStake",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ImproperRoyalties",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ImproperSignature",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ImproperTailorFee",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InsufficientFunds",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "LackOfDerivatives",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "MetaverseIdAlreadyClaimed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NoSuchListing",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotAdmin",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotBridgeRouter",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotContractOwner",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotDCLLot",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotDerivative",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotEnoughtSTYLETokens",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotOwner",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "PriceNotMet",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "SameERC1155AlreadyStaked",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "adminSignature",
						"type": "bytes"
					}
				],
				"name": "DCLInit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "contract_",
						"type": "address"
					}
				],
				"name": "GenerationMint",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "redeemer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint96",
						"name": "metaverseId",
						"type": "uint96"
					}
				],
				"name": "ItemBuyAndMint",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "redeemer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint96",
						"name": "metaverseId",
						"type": "uint96"
					}
				],
				"name": "ItemClaimSingular",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "redeemer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "contract_",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "voucherURI",
						"type": "string"
					}
				],
				"name": "NFTMint",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "signer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "redeemer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "contract_",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "voucherURI",
						"type": "string"
					}
				],
				"name": "NFTRedeem",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					}
				],
				"name": "Staked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					}
				],
				"name": "Unstaked",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "DOMAIN_SEPARATOR",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "admin",
						"type": "address"
					}
				],
				"name": "addAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "amount",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "redeemer",
								"type": "address"
							},
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "tokenId",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "payment",
										"type": "uint256"
									},
									{
										"internalType": "address",
										"name": "tokenAddress",
										"type": "address"
									},
									{
										"internalType": "uint96",
										"name": "metaverseId",
										"type": "uint96"
									},
									{
										"internalType": "address",
										"name": "paymentToken",
										"type": "address"
									},
									{
										"internalType": "uint88",
										"name": "modelId",
										"type": "uint88"
									},
									{
										"internalType": "address",
										"name": "bidder",
										"type": "address"
									},
									{
										"internalType": "address",
										"name": "environment",
										"type": "address"
									},
									{
										"internalType": "string",
										"name": "uri",
										"type": "string"
									},
									{
										"internalType": "bytes",
										"name": "signature",
										"type": "bytes"
									}
								],
								"internalType": "struct ILazyMintingStructs.NonmintedNFT",
								"name": "nonmintedNFT",
								"type": "tuple"
							},
							{
								"internalType": "bytes",
								"name": "signature",
								"type": "bytes"
							}
						],
						"internalType": "struct INFTMarketplaceStructs.RequstedData[]",
						"name": "requestedDataArr",
						"type": "tuple[]"
					}
				],
				"name": "batchBuy",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "redeemer",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "payment",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "tokenAddress",
								"type": "address"
							},
							{
								"internalType": "uint96",
								"name": "metaverseId",
								"type": "uint96"
							},
							{
								"internalType": "address",
								"name": "paymentToken",
								"type": "address"
							},
							{
								"internalType": "uint88",
								"name": "modelId",
								"type": "uint88"
							},
							{
								"internalType": "address",
								"name": "bidder",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "environment",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "uri",
								"type": "string"
							},
							{
								"internalType": "bytes",
								"name": "signature",
								"type": "bytes"
							}
						],
						"internalType": "struct ILazyMintingStructs.NonmintedNFT",
						"name": "nonmintedNFT",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "buyAndMint",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "redeemer",
						"type": "address"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "payment",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "tokenAddress",
								"type": "address"
							},
							{
								"internalType": "uint96",
								"name": "metaverseId",
								"type": "uint96"
							},
							{
								"internalType": "address",
								"name": "paymentToken",
								"type": "address"
							},
							{
								"internalType": "uint88",
								"name": "modelId",
								"type": "uint88"
							},
							{
								"internalType": "address",
								"name": "bidder",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "environment",
								"type": "address"
							},
							{
								"internalType": "string",
								"name": "uri",
								"type": "string"
							},
							{
								"internalType": "bytes",
								"name": "signature",
								"type": "bytes"
							}
						],
						"internalType": "struct ILazyMintingStructs.NonmintedNFT",
						"name": "nonmintedNFT",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "DCLSignature",
						"type": "bytes"
					}
				],
				"name": "buyDCL",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "tokenAddress",
								"type": "address"
							},
							{
								"internalType": "uint96",
								"name": "metaverseId",
								"type": "uint96"
							},
							{
								"internalType": "address",
								"name": "bidder",
								"type": "address"
							},
							{
								"internalType": "uint88",
								"name": "modelId",
								"type": "uint88"
							},
							{
								"internalType": "string",
								"name": "uri",
								"type": "string"
							},
							{
								"internalType": "bytes",
								"name": "signature",
								"type": "bytes"
							}
						],
						"internalType": "struct ILazyMintingStructs.NonmintedNFTSingular",
						"name": "nonmintedNFT",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "claimSingularNFT",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "tokenAddress",
								"type": "address"
							},
							{
								"internalType": "uint96",
								"name": "metaverseId",
								"type": "uint96"
							},
							{
								"internalType": "address",
								"name": "bidder",
								"type": "address"
							},
							{
								"internalType": "uint88",
								"name": "modelId",
								"type": "uint88"
							},
							{
								"internalType": "string",
								"name": "uri",
								"type": "string"
							},
							{
								"internalType": "bytes",
								"name": "signature",
								"type": "bytes"
							}
						],
						"internalType": "struct ILazyMintingStructs.NonmintedNFTSingular",
						"name": "nonmintedNFT",
						"type": "tuple"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					},
					{
						"internalType": "bytes",
						"name": "DCLSignature",
						"type": "bytes"
					}
				],
				"name": "claimSingularNFTDCL",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "derivativeImplementation",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "cursor",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "howMany",
						"type": "uint256"
					}
				],
				"name": "getAdmins",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "admins",
						"type": "address[]"
					},
					{
						"internalType": "uint256",
						"name": "newCursor",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getAncestor",
				"outputs": [
					{
						"internalType": "address",
						"name": "ancestor",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "cutSignature",
						"type": "bytes32"
					},
					{
						"internalType": "address",
						"name": "redeemer",
						"type": "address"
					}
				],
				"name": "getDCLBought",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32[]",
						"name": "cutSignatures",
						"type": "bytes32[]"
					}
				],
				"name": "getIfSignsProceeded",
				"outputs": [
					{
						"internalType": "bool[]",
						"name": "result",
						"type": "bool[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "cutSignature",
						"type": "bytes32"
					}
				],
				"name": "getLotInfo",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getStake",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "tokenAddress",
								"type": "address"
							},
							{
								"internalType": "uint96",
								"name": "numberOfDerivatives",
								"type": "uint96"
							},
							{
								"internalType": "address",
								"name": "stakeOwner",
								"type": "address"
							},
							{
								"internalType": "uint88",
								"name": "modelId",
								"type": "uint88"
							},
							{
								"internalType": "bool",
								"name": "isERC1155",
								"type": "bool"
							}
						],
						"internalType": "struct IStakingStructs.Stake",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getStakeSingular",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "tailorFee",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "tokenAddress",
								"type": "address"
							},
							{
								"internalType": "uint88",
								"name": "modelId",
								"type": "uint88"
							},
							{
								"internalType": "bool",
								"name": "isERC1155",
								"type": "bool"
							},
							{
								"internalType": "address",
								"name": "stakeOwner",
								"type": "address"
							},
							{
								"internalType": "uint96[]",
								"name": "metaverseIds",
								"type": "uint96[]"
							}
						],
						"internalType": "struct IStakingStructs.StakeSingular",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "cursor",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "howMany",
						"type": "uint256"
					}
				],
				"name": "getStakes",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "tokenAddress",
								"type": "address"
							},
							{
								"internalType": "uint96",
								"name": "numberOfDerivatives",
								"type": "uint96"
							},
							{
								"internalType": "address",
								"name": "stakeOwner",
								"type": "address"
							},
							{
								"internalType": "uint88",
								"name": "modelId",
								"type": "uint88"
							},
							{
								"internalType": "bool",
								"name": "isERC1155",
								"type": "bool"
							}
						],
						"internalType": "struct IStakingStructs.Stake[]",
						"name": "stakes",
						"type": "tuple[]"
					},
					{
						"internalType": "uint256",
						"name": "newCursor",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "cursor",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "howMany",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "getStakesByOwner",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "tokenAddress",
								"type": "address"
							},
							{
								"internalType": "uint96",
								"name": "numberOfDerivatives",
								"type": "uint96"
							},
							{
								"internalType": "address",
								"name": "stakeOwner",
								"type": "address"
							},
							{
								"internalType": "uint88",
								"name": "modelId",
								"type": "uint88"
							},
							{
								"internalType": "bool",
								"name": "isERC1155",
								"type": "bool"
							}
						],
						"internalType": "struct IStakingStructs.Stake[]",
						"name": "stakes",
						"type": "tuple[]"
					},
					{
						"internalType": "uint256",
						"name": "newCursor",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "cursor",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "howMany",
						"type": "uint256"
					}
				],
				"name": "getStakesSingular",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "tailorFee",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "tokenAddress",
								"type": "address"
							},
							{
								"internalType": "uint88",
								"name": "modelId",
								"type": "uint88"
							},
							{
								"internalType": "bool",
								"name": "isERC1155",
								"type": "bool"
							},
							{
								"internalType": "address",
								"name": "stakeOwner",
								"type": "address"
							},
							{
								"internalType": "uint96[]",
								"name": "metaverseIds",
								"type": "uint96[]"
							}
						],
						"internalType": "struct IStakingStructs.StakeSingular[]",
						"name": "stakes",
						"type": "tuple[]"
					},
					{
						"internalType": "uint256",
						"name": "newCursor",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "cursor",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "howMany",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "getStakesSingularByOwner",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "tailorFee",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "tokenAddress",
								"type": "address"
							},
							{
								"internalType": "uint88",
								"name": "modelId",
								"type": "uint88"
							},
							{
								"internalType": "bool",
								"name": "isERC1155",
								"type": "bool"
							},
							{
								"internalType": "address",
								"name": "stakeOwner",
								"type": "address"
							},
							{
								"internalType": "uint96[]",
								"name": "metaverseIds",
								"type": "uint96[]"
							}
						],
						"internalType": "struct IStakingStructs.StakeSingular[]",
						"name": "stakes",
						"type": "tuple[]"
					},
					{
						"internalType": "uint256",
						"name": "newCursor",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "getTailor",
				"outputs": [
					{
						"internalType": "address",
						"name": "tailor",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "contract_",
						"type": "address"
					}
				],
				"name": "isDerivative",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "contracts_",
						"type": "address[]"
					}
				],
				"name": "isDerivatives",
				"outputs": [
					{
						"internalType": "bool[]",
						"name": "isDerivatives_",
						"type": "bool[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "redeemer",
						"type": "address"
					},
					{
						"internalType": "uint96",
						"name": "metaverseId",
						"type": "uint96"
					},
					{
						"internalType": "uint88",
						"name": "modelId",
						"type": "uint88"
					},
					{
						"internalType": "string",
						"name": "tokenURI",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "symbol",
						"type": "string"
					}
				],
				"name": "mint",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "tokenURI",
						"type": "string"
					},
					{
						"internalType": "uint88",
						"name": "modelId",
						"type": "uint88"
					},
					{
						"internalType": "uint96",
						"name": "numberOfDerivatives",
						"type": "uint96"
					},
					{
						"components": [
							{
								"internalType": "uint16",
								"name": "environmentRoyaltyPercent",
								"type": "uint16"
							},
							{
								"internalType": "uint16",
								"name": "stakeOwnerRoyaltyPercent",
								"type": "uint16"
							},
							{
								"internalType": "uint80",
								"name": "tailorRoyaltyStable",
								"type": "uint80"
							},
							{
								"internalType": "uint16",
								"name": "tailorRoyaltyPercent",
								"type": "uint16"
							}
						],
						"internalType": "struct IStakingStructs.Royalties",
						"name": "royalties_",
						"type": "tuple"
					}
				],
				"name": "mintGenerationAndStake",
				"outputs": [
					{
						"internalType": "address",
						"name": "clone",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "tokenURI",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "tailorFee",
						"type": "uint256"
					},
					{
						"internalType": "uint88",
						"name": "modelId",
						"type": "uint88"
					},
					{
						"internalType": "uint96[]",
						"name": "metaverseIds",
						"type": "uint96[]"
					},
					{
						"internalType": "address payable",
						"name": "paymentToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "paymentAmount",
						"type": "uint256"
					}
				],
				"name": "mintGenerationAndStakeSingular",
				"outputs": [
					{
						"internalType": "address",
						"name": "clone",
						"type": "address"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC1155BatchReceived",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC1155Received",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC721Received",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "admin",
						"type": "address"
					}
				],
				"name": "removeAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "dclAdmin_",
						"type": "address"
					}
				],
				"name": "setDCLAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenStaking_",
						"type": "address"
					}
				],
				"name": "setTokenStaking",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint88",
						"name": "modelId",
						"type": "uint88"
					},
					{
						"internalType": "uint96",
						"name": "numberOfDerivatives",
						"type": "uint96"
					},
					{
						"components": [
							{
								"internalType": "uint16",
								"name": "environmentRoyaltyPercent",
								"type": "uint16"
							},
							{
								"internalType": "uint16",
								"name": "stakeOwnerRoyaltyPercent",
								"type": "uint16"
							},
							{
								"internalType": "uint80",
								"name": "tailorRoyaltyStable",
								"type": "uint80"
							},
							{
								"internalType": "uint16",
								"name": "tailorRoyaltyPercent",
								"type": "uint16"
							}
						],
						"internalType": "struct IStakingStructs.Royalties",
						"name": "royalties_",
						"type": "tuple"
					},
					{
						"internalType": "bool",
						"name": "isERC1155",
						"type": "bool"
					}
				],
				"name": "stake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "tailorFee",
						"type": "uint256"
					},
					{
						"internalType": "uint88",
						"name": "modelId",
						"type": "uint88"
					},
					{
						"internalType": "uint96[]",
						"name": "metaverseIds",
						"type": "uint96[]"
					},
					{
						"internalType": "bool",
						"name": "isERC1155",
						"type": "bool"
					},
					{
						"internalType": "address payable",
						"name": "paymentToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "paymentAmount",
						"type": "uint256"
					}
				],
				"name": "stakeSingular",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokenStaking",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "unstake",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "bridgeRouter_",
						"type": "address"
					}
				],
				"name": "updateBridgeRouter",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint16",
								"name": "minEnvironmentRoyaltyPercent",
								"type": "uint16"
							},
							{
								"internalType": "uint16",
								"name": "maxEnvironmentRoyaltyPercent",
								"type": "uint16"
							},
							{
								"internalType": "uint16",
								"name": "minStakeOwnerRoyaltyPercent",
								"type": "uint16"
							},
							{
								"internalType": "uint16",
								"name": "maxStakeOwnerRoyaltyPercent",
								"type": "uint16"
							},
							{
								"internalType": "uint80",
								"name": "minTailorRoyaltyStable",
								"type": "uint80"
							},
							{
								"internalType": "uint80",
								"name": "maxTailorRoyaltyStable",
								"type": "uint80"
							},
							{
								"internalType": "uint16",
								"name": "minTailorRoyaltyPercent",
								"type": "uint16"
							},
							{
								"internalType": "uint16",
								"name": "maxTailorRoyaltyPercent",
								"type": "uint16"
							}
						],
						"internalType": "struct IStakingStructs.FeesLimits",
						"name": "feesLimits_",
						"type": "tuple"
					}
				],
				"name": "updateFeesLimits",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint88",
						"name": "modelId",
						"type": "uint88"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "minTailorFee",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxTailorFee",
								"type": "uint256"
							}
						],
						"internalType": "struct IStakingStructs.FeesLimitsSingular",
						"name": "feesLimitsSingular_",
						"type": "tuple"
					}
				],
				"name": "updateFeesLimitsSingular",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint96",
						"name": "metaverseId",
						"type": "uint96"
					},
					{
						"internalType": "uint256",
						"name": "fee",
						"type": "uint256"
					}
				],
				"name": "updateMetaverseFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "minStyleNFTs",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "minStyleAssets",
								"type": "uint256"
							}
						],
						"internalType": "struct IStakingStructs.StyleLimits",
						"name": "styleLimits_",
						"type": "tuple"
					}
				],
				"name": "updateStyleLimits",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"addAdmin(address)": {
					"details": "Add admin (only by contract owner).",
					"params": {
						"admin": "Address of admin."
					}
				},
				"buyAndMint(address,(uint256,uint256,address,uint96,address,uint88,address,address,string,bytes),bytes,uint256)": {
					"details": "Buy item with eth and mint it.",
					"params": {
						"nonmintedNFT": "NonmintedNFT to buy and mint.",
						"signature": "Signature for nonmintedNFT by creator of the item."
					}
				},
				"getAdmins(uint256,uint256)": {
					"details": "Get admins."
				},
				"getAncestor(address,uint256)": {
					"params": {
						"tokenId": "A tokenId of ERC721 to get info about."
					}
				},
				"getOwner()": {
					"details": "Get owner of the contract."
				},
				"getStake(address,uint256)": {
					"details": "Get stake."
				},
				"getStakeSingular(address,uint256)": {
					"details": "Get stake Singular."
				},
				"getStakes(uint256,uint256)": {
					"details": "Get all stakes.",
					"returns": {
						"newCursor": "for subsequental calls",
						"stakes": "stakes"
					}
				},
				"getStakesSingular(uint256,uint256)": {
					"details": "Get all stakes Singular.",
					"returns": {
						"newCursor": "for subsequental calls",
						"stakes": "Singular"
					}
				},
				"getTailor(address,uint256)": {
					"params": {
						"tokenId": "A tokenId of ERC721 to get info about."
					}
				},
				"isDerivative(address)": {
					"details": "Determine if the contract is the derivative.",
					"params": {
						"contract_": "A contract_ to get info about."
					}
				},
				"isDerivatives(address[])": {
					"details": "Determine if the contracts are the derivatives.",
					"params": {
						"contracts_": "The contracts_ to get info about."
					}
				},
				"removeAdmin(address)": {
					"details": "Remove admin (only by contract owner).",
					"params": {
						"admin": "Address of admin."
					}
				},
				"stake(address,uint256,uint88,uint96,(uint16,uint16,uint80,uint16),bool)": {
					"details": "Stake a token.",
					"params": {
						"tokenAddress": "Address of ERC721 collection.",
						"tokenId": "The tokenId of ERC721 to stake."
					}
				},
				"stakeSingular(address,uint256,uint256,uint88,uint96[],bool,address,uint256)": {
					"details": "Stake Singular a token.",
					"params": {
						"tokenAddress": "Address of ERC721 collection.",
						"tokenId": "The tokenId of ERC721 to stake."
					}
				},
				"unstake(address,uint256)": {
					"details": "Unstake a token.",
					"params": {
						"tokenAddress": "Address of ERC721 collection.",
						"tokenId": "The tokenId of ERC721 to unstake."
					}
				},
				"updateFeesLimits((uint16,uint16,uint16,uint16,uint80,uint80,uint16,uint16))": {
					"details": "Update fees limits."
				},
				"updateFeesLimitsSingular(uint88,(uint256,uint256))": {
					"details": "Update fees limits singular."
				},
				"updateMetaverseFee(uint96,uint256)": {
					"details": "Update metaverses' fees."
				},
				"withdraw(address,uint256)": {
					"details": "Withdraw tokens from contract (only by contract owner).",
					"params": {
						"token": "Address of token to withdraw."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"DOMAIN_SEPARATOR()": {
					"notice": "----------------------------------------------------------------------- EIP-712 Logic -----------------------------------------------------------------------"
				},
				"derivativeImplementation()": {
					"notice": "Return derivative implementation contract."
				},
				"getAncestor(address,uint256)": {
					"notice": "Return ancestor by tokenId."
				},
				"getTailor(address,uint256)": {
					"notice": "Return tailor by tokenId."
				},
				"stake(address,uint256,uint88,uint96,(uint16,uint16,uint80,uint16),bool)": {
					"notice": "The ERC721 have to be approved to this contract."
				},
				"stakeSingular(address,uint256,uint256,uint88,uint96[],bool,address,uint256)": {
					"notice": "The ERC721 have to be approved to this contract."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/NFTMarketplace.sol": "NFTMarketplace"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": [],
		"viaIR": true
	},
	"sources": {
		"@uniswap/swap-router-contracts/contracts/interfaces/IV3SwapRouter.sol": {
			"keccak256": "0xa2300af2b82af292216a8f3f301a86e65463655fff9fb791515e3fd2ccf4a14c",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://a0a9bece58527fb5c1773d86666c7a71884a78f413e230dfa8c8a7f8ea564ef9",
				"dweb:/ipfs/QmbDhvpoZJN1KntxUUxkYV89RPTwqVBiyHBkvVh4QHSveo"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
			"keccak256": "0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652",
				"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS"
			]
		},
		"lib/solbase/src/utils/EIP712.sol": {
			"keccak256": "0xa981f62dabe5286b6c73990341d4b617bb5d7c108d1709b36507ea2a250e4a69",
			"license": "MIT",
			"urls": [
				"bzz-raw://efba836618c00478691e0bcab5644ecf15450fbcff6145bee3e81002e187dffb",
				"dweb:/ipfs/QmRgNd5xUAofuhKgGPXSigH1YThPPZcL8fBWi7x3Nj1Ab1"
			]
		},
		"lib/solmate/src/tokens/ERC1155.sol": {
			"keccak256": "0x1879bb8610ccabbe85e4dca1608d26b6d63cfdedf84b4f03a986fd8947b65eb4",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://88a44fef6342fa1a9ab12550a59771f074076abfd96f55c404b64d8dfa82ed6c",
				"dweb:/ipfs/QmcCqakjWfsSzAJFLanfUwChHrLNvaqX1XeAdGZD97XdKb"
			]
		},
		"lib/solmate/src/tokens/ERC20.sol": {
			"keccak256": "0x8d662fa38a1129c3f86ae334f646b5db4fe0a0de25d0782d86e275975e3dc75c",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://ec1d69baa70ce48c6572825ee05242b0dce52bf30db79584aced35bf52fdfc7b",
				"dweb:/ipfs/QmURvFnhBo6EkDR3voSP71vaQzpp8UG57yZRTBQ1TW4s8S"
			]
		},
		"lib/solmate/src/tokens/ERC721.sol": {
			"keccak256": "0x180174a44dff844a92522c5e0a2d2161c102a88749c0765212e2234f38f3195d",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://766f804323935a83d74e4c3dad6254539621400dff344c1c5d2e1130dceb1ee5",
				"dweb:/ipfs/QmPdTSFmkE6TKre3t4BkNnmEqDA1VYpy7Gvp6ExqxeHkcY"
			]
		},
		"lib/solmate/src/tokens/WETH.sol": {
			"keccak256": "0xfea57f57a3f2c589314a56c59d28805e6cd37f2be0a096fbf5533b9243948eeb",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://1252a169ecf65ef52f1b6841957e7a9a17dd0b8cebc97991a0333ca83d2f60fc",
				"dweb:/ipfs/QmV5XUnxvYtMjpB3tvWq6Cy8eavsydgm5wzHdtvyxc8g6Q"
			]
		},
		"lib/solmate/src/utils/FixedPointMathLib.sol": {
			"keccak256": "0x60dac062d016631230122c6bde47f441bf50b6ca49410fd8a665d4acf7992f52",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://97e6d747a3ce881630d04d5098d2c4caaaaff7db98ad91ab39131a7f44cba337",
				"dweb:/ipfs/QmbGBChbhR24LkJ34KzovS8izbxY4puAToaBc3fpQ5mKcM"
			]
		},
		"lib/solmate/src/utils/ReentrancyGuard.sol": {
			"keccak256": "0xedf1f66d9980c2b85c8ad50be36bc195a5d4413aa7ee09bd90c48581b648f760",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://fe4336110dff7ad7645392b67dc07ba016e7ad07006ca68f2856946f440c601b",
				"dweb:/ipfs/QmdWwy4Vf1t2kHY7V8qeXMdSXTpapbNJ1ccsA6j3JAhk3d"
			]
		},
		"lib/solmate/src/utils/SafeTransferLib.sol": {
			"keccak256": "0xad5d98efdd1809ce7e7e685b724bf8bc5d0accebbb03aa8fe719ec9dc94956b1",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://857107b9d35d304ea8be921c2e2f5281bba3c53e1c19587bdc3be09f2fdbf4d7",
				"dweb:/ipfs/QmW3J2VBmjiA6zLLcwdkSxwEfJaFb1Jc5TJcKhiKzBnaEf"
			]
		},
		"solady/src/utils/ECDSA.sol": {
			"keccak256": "0x2b27db399017306663dd21599aaa82dfd8caca559b1c5e4bda4eb435983ae511",
			"license": "MIT",
			"urls": [
				"bzz-raw://c4556b607236e1fef21b47f0cce49bd3ec7dd9c1feb3bec9b1405130515bb904",
				"dweb:/ipfs/Qmbwa2Eext85sbxjfik27chhDWXwZmng8i9mLoPzunkuNX"
			]
		},
		"solady/src/utils/LibClone.sol": {
			"keccak256": "0x90c68c527f54164e04fe7908246628c96c4d353050efc41910d41033f6ef196b",
			"license": "MIT",
			"urls": [
				"bzz-raw://3d2327176fca279f135c0e4387b07ffaf8a340f28de130960e572557afcc640f",
				"dweb:/ipfs/QmPgSb3nFCgybvN4VCw64JLeKVmQYAyiFXARo6oQRi2vxk"
			]
		},
		"solady/src/utils/LibString.sol": {
			"keccak256": "0x1aeed89e393350c7b015f9e77dd360f64427e059442833bf6647f34a535e1b42",
			"license": "MIT",
			"urls": [
				"bzz-raw://71de991154b5c4963fedfdd73b77eeb2f0a01ebdad2ca8cacfd354aea7467d70",
				"dweb:/ipfs/QmPe4ttUtoApXsBunEbXmemhZTbNd1eXYr5evQEqNkHvcY"
			]
		},
		"src/Base.sol": {
			"keccak256": "0x12e80075f5856676c3d424e77667bf11f1ceb06b99e3fb43d7813571fa7bc4f5",
			"license": "MIT",
			"urls": [
				"bzz-raw://52398403c56ef8d3eafa9c0de9d071365bc10801f1ac6fceb73d1b3ed0b4abe3",
				"dweb:/ipfs/QmTRWDffUfqPKtXVjX8v6MxUSLALY3iNQjHKZW5PREXUv4"
			]
		},
		"src/Bidding.sol": {
			"keccak256": "0xb40b474e7be277e0a3484698b8cc83660e9aac7ce4c330fd119dd7b76c908efd",
			"license": "MIT",
			"urls": [
				"bzz-raw://d5d4abba632c635e71c1343ed78695e2197c9f48bbb38b9ca85026a7cc518286",
				"dweb:/ipfs/QmRFfjqgjMVkA4T2M7QYCVucUiEWorSfuuRnyc5iSYfdkJ"
			]
		},
		"src/Generation.sol": {
			"keccak256": "0x6a119b53bb4a256eac63db835fc4ed5809aa8a2a3130d6211ef83198a6908e1d",
			"license": "MIT",
			"urls": [
				"bzz-raw://8dfa15aa9210bc8b7f72d65d2d6c4487bac554ce41687e3ffca4c63775bc1e3c",
				"dweb:/ipfs/QmYYu1jk5fCZHc5mRuoRQx1f2ojzEauETweFD2JSdQvDuf"
			]
		},
		"src/LazyMinting.sol": {
			"keccak256": "0x314663d5861a95167e999a962bb693965bb8cec9212db1d47ab4832c45e86018",
			"license": "MIT",
			"urls": [
				"bzz-raw://52973bb49ff95d2f373b6cefde077a330fd47f640d4352f1d653b05b15ba9d54",
				"dweb:/ipfs/QmVnZLmrQzW6PZErphHNvLqPqheitGuwEr3mwLxs3mYEfW"
			]
		},
		"src/NFTMarketplace.sol": {
			"keccak256": "0x16bdb916654811ec576e97b194b71575a75c2131b7256af3d437c07b1c3c47f4",
			"license": "MIT",
			"urls": [
				"bzz-raw://07a203814c64fc30b46775aecd3f780c48a00f72d81b7878caf67dacb63805cd",
				"dweb:/ipfs/QmT5u1jF41wQGp3QXoATnZoMSPb5851ex11HWb6crUuRUP"
			]
		},
		"src/Staking.sol": {
			"keccak256": "0xce4870cabfb1cad6de9539a7c5f9d44c8e2be6a8e88ec042b941e3c5ac87b03f",
			"license": "MIT",
			"urls": [
				"bzz-raw://f6e57f650e6badeff33a4fa0a4faf3746ed6a34a1e9d3fa841867d7041e61c7e",
				"dweb:/ipfs/QmZSCDQiDAxpdYXhMym3XxGS5QgFzU77JhJnuk6TZMUVdv"
			]
		},
		"src/erc721a/ERC721A.sol": {
			"keccak256": "0xead6590f11a04cb96e5edf95f7da3c6cb577daa472cc6510379890889c35cec6",
			"license": "MIT",
			"urls": [
				"bzz-raw://bd8ecdb4f334cf0769a98a62d3b5b67a4e4af71e743e8bb681cb7011f4d482a9",
				"dweb:/ipfs/QmP9eLVQUafoQVJf4egPJr3S5PWyYCc7tz6H93EDsMMVrH"
			]
		},
		"src/erc721a/IERC721A.sol": {
			"keccak256": "0xb6aa4b237ed837d837811abab3f50105354145d0a6dcc09d90064ec06de2f4ae",
			"license": "MIT",
			"urls": [
				"bzz-raw://ea48ea306c76c5626d58e89622474b7f2c3f2ff54db5f41a0a9f65085dcf05aa",
				"dweb:/ipfs/QmXzLLvJVTddgErEQyFWbnN9ULf8KdPZAkKJg3hzdxXzPT"
			]
		},
		"src/interfaces/IBase.sol": {
			"keccak256": "0x65c16d5896bd005c387d2afd6880d3af807bd01a4aa972e357980fc4a01c2391",
			"license": "MIT",
			"urls": [
				"bzz-raw://5330bc22b2c6fa0f57641053599a8b893b31fb1244cd0be989b80da342d73c7b",
				"dweb:/ipfs/QmeZ1hsyZYM9GMmsFRBW6geDQdjLbo3RjoKnzmtyyM66fN"
			]
		},
		"src/interfaces/IGeneration.sol": {
			"keccak256": "0x7048617b1f4426a911a2e139b49fe6a4723686f47950ea28d283eec5f32d675f",
			"license": "MIT",
			"urls": [
				"bzz-raw://342c488c22b8255b8906d3ae9973b3d52eb7866ad8f20ef72ad5cbbdf5458c5a",
				"dweb:/ipfs/QmVqRnRPwD3VHUdE816SoFmkxpCzhCYsrGVU3wcfVn11Ud"
			]
		},
		"src/interfaces/ILazyMinting.sol": {
			"keccak256": "0xd5cb8c7acbe15d072e24a5e4f1e17fa0477ab6cf3c360dc431370a69ea56495a",
			"license": "MIT",
			"urls": [
				"bzz-raw://ab2c60d29216be6509950f1658852799c9e2b98bf989657ab260c3c28a972004",
				"dweb:/ipfs/QmdEU3syjX8UBESSQMXwziWnAjivfnvoB6GdStdzzrFSFJ"
			]
		},
		"src/interfaces/INFTMarketplace.sol": {
			"keccak256": "0x97f014058613fc4fbf667e1f2eeafc503729c7d3e97ad24d4183f1369237d3f2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6f493b75cf7ae44f1c24ab4a5579750b5df4b27ef713b0633aee2f12cc36712c",
				"dweb:/ipfs/QmX2RopvEqaLRjWTdGu8xpB2UNmFhb1cKtwYhVz72WWbNW"
			]
		},
		"src/interfaces/IStaking.sol": {
			"keccak256": "0xfa75d00f8d757fb246cf75d24ffa69e5d3c95a04f20083566bc6c687a002dba6",
			"license": "MIT",
			"urls": [
				"bzz-raw://6d7264c3cff8e34e9f3b09d314c091e2474604859698d16cc7dde01ee3583a6b",
				"dweb:/ipfs/QmdutXJTaJqbnbDtqQo7g9fiyNfGLeiti4Msdpg4TcyNUV"
			]
		},
		"src/interfaces/base/IBaseErrors.sol": {
			"keccak256": "0x3d16f48f296f4913d6b57296f85578e4d84e9b20a927a8e6008bddbc3df9eec3",
			"license": "MIT",
			"urls": [
				"bzz-raw://2ba713751c8cb979cffed709bbe5140ab0dcc6a51ce75bcefac271530b405c52",
				"dweb:/ipfs/QmTWJE2pijmXjHsT1EuLxwqnDytkxMifit89CJDXtqf4Yz"
			]
		},
		"src/interfaces/base/IBaseEvents.sol": {
			"keccak256": "0x40afc8fb9c9bf459abb2d084e2a324eaab7eff0f1cc9bac723ca7a4e7e414f0a",
			"license": "MIT",
			"urls": [
				"bzz-raw://d176c90e268bd2a66aaed117ecf5108e1530f1c03abcff2a5579f8d621d67bf6",
				"dweb:/ipfs/QmQA6v6XcB97HQZFjuio32A5iAyr2nauWvoA6sV41RZw1N"
			]
		},
		"src/interfaces/base/IBaseStructs.sol": {
			"keccak256": "0x93f31798336c9e0ad3f085b30fb5c0ea11218f1b0634b04b72c55e24c06fcb65",
			"license": "MIT",
			"urls": [
				"bzz-raw://89bf19ed706cf8357df5ba67e933f1acb2d08b925c79d812d176e23a82b04308",
				"dweb:/ipfs/QmaAfYg5qsc1ZDx1rmruiAaTowYDT9LEnP2zRdTcNfGS5i"
			]
		},
		"src/interfaces/generation/IGenerationErrors.sol": {
			"keccak256": "0x35623113bd641fbe9401c2befac99e096cd9b984064d994c73d2b8a2d9eccfee",
			"license": "MIT",
			"urls": [
				"bzz-raw://fc4bcf9f83ba75eef05ef7fe4bcd62565d2681d77be01d1b147b093c8961d539",
				"dweb:/ipfs/Qmd2KhVoE2gfsZutfziiVchS5Y95YPvKtT2brPeCwa6LXH"
			]
		},
		"src/interfaces/generation/IGenerationEvents.sol": {
			"keccak256": "0xc80941a89fd21a30e0b4b40144fe36202e20d9cf3b48ab5d4c5b302ca6e4d74a",
			"license": "MIT",
			"urls": [
				"bzz-raw://3fb3da6812aee2468141ee1614ae42851c51ed87c5e2f3de9f50f4a2f0706a56",
				"dweb:/ipfs/QmX1EdaraeFT5EBVs8uSAzNQ6N51uSGdKX4WUhT4sjDZBh"
			]
		},
		"src/interfaces/generation/IGenerationStructs.sol": {
			"keccak256": "0x58492ed91c341b1e57e1901d8e6bdb835227a5816af9c54c04b086e2c7ef8645",
			"license": "MIT",
			"urls": [
				"bzz-raw://db7047e707620562a99c0bb679defb9756fcabc60f28f8c67a85a15dc3d89a28",
				"dweb:/ipfs/QmdEohjx97pBUJu7rytxgecAZL4dh1u1TZPEp8dM5PJpz4"
			]
		},
		"src/interfaces/lazyminting/ILazyMintingErrors.sol": {
			"keccak256": "0x8690166a042fde9dc60b0aacab405eb23e9849ad5533f9c4c817a7f97402b7a9",
			"license": "MIT",
			"urls": [
				"bzz-raw://18af8b133d74cb7de3944e3657218521dc86230acdcab10fc2c9d052dff5e3ff",
				"dweb:/ipfs/QmRpcVjqnhPxQxmKkFYyrqBz55DzsPjuEAZoJAHbKzegtN"
			]
		},
		"src/interfaces/lazyminting/ILazyMintingEvents.sol": {
			"keccak256": "0x587d4061df61a506ac08b46f0faf51867f6faf793091a82b8f14eb2ec2a4468a",
			"license": "MIT",
			"urls": [
				"bzz-raw://fb23af11d202c1c5b823b1eb305ae2b259998cf7200ffde2331d4f1c319a8eb5",
				"dweb:/ipfs/QmQ2XMfnTgtFN3eXTPAdwPR9dLuhbvZmHiHp7nG4wSXFzb"
			]
		},
		"src/interfaces/lazyminting/ILazyMintingStructs.sol": {
			"keccak256": "0xd086dad38f8657098c95d79eb02261d95ce48f8531c803277ee282b2054fd31a",
			"license": "MIT",
			"urls": [
				"bzz-raw://967bd53abc028bc4a3693bc91687986aa9ad4404efccf840682b3f1ee3c694a1",
				"dweb:/ipfs/QmV6aDWE7TnDxsXETLz13TXnujmGC36s6EkLPt5uUebHv8"
			]
		},
		"src/interfaces/nftmarketplace/INFTMarketplaceErrors.sol": {
			"keccak256": "0x64f04d2983fa0180c3917c4e61753ac92a9a5a59a46ba63a00fc046227a58eb8",
			"license": "MIT",
			"urls": [
				"bzz-raw://498fa21f946a8fb3a5150c294ba4ca7f3cdcbcfc132a44b0be8c27a5ed397ee7",
				"dweb:/ipfs/QmWgDMqM5bdkxvs5oPwan98hT9rDtx7BTKKuRhMu7AhW5q"
			]
		},
		"src/interfaces/nftmarketplace/INFTMarketplaceEvents.sol": {
			"keccak256": "0x89564704b76e77ec3b64c9c4ae2eccfa52e976517963c5738ef3ff0a1e711da2",
			"license": "MIT",
			"urls": [
				"bzz-raw://eec32147374672e592323affaefa9ca6d0eb5c4fda1098427378562fcd3ff612",
				"dweb:/ipfs/QmVHDQoWd8s5FmJcA528TzttLdr79MURQU9Zx7ZVvPMe3k"
			]
		},
		"src/interfaces/nftmarketplace/INFTMarketplaceStructs.sol": {
			"keccak256": "0x9ac96935103764e5ffb573ac6ff9633ef617e06873c08e2e070181e54781510a",
			"license": "MIT",
			"urls": [
				"bzz-raw://36417e80ef90bd18a9a47f1d97cabc865324a30928b558ea78ec8f4a76c7c480",
				"dweb:/ipfs/QmZWUWBwrZVApgfgH9kxMnxnYB2r4w5pRF3EaR6XAFboje"
			]
		},
		"src/interfaces/staking/IStakingErrors.sol": {
			"keccak256": "0xa199e23a36e383b021fd31bfcef84cee8ad082bfa8a2c2df306eeeeb7d078106",
			"license": "MIT",
			"urls": [
				"bzz-raw://f9cc4df5849c100f87f783047c7d227a7b2bd760d9d8780edcbaa02c60c5c0ad",
				"dweb:/ipfs/QmNnLgFZsppjChdbGkdeS9WmdTBN2sNxbvQf48hY7KuZGU"
			]
		},
		"src/interfaces/staking/IStakingEvents.sol": {
			"keccak256": "0x376a912973132abc79bad6a2d936ee779044af8a5023e12bacea40815703d7aa",
			"license": "MIT",
			"urls": [
				"bzz-raw://c1c62a62f3508f447391f288ab159137d3559354b4df5cf15de468d39053b7f9",
				"dweb:/ipfs/QmSv4P4ZKhQ29kTaENZ6uVM37HuSq2ZeDz7Hjqo2SpmhAg"
			]
		},
		"src/interfaces/staking/IStakingStructs.sol": {
			"keccak256": "0x2fd40914fd5ae1f7e4d5e5019aa95c30246c7f00b4a2c76d65eb5e9428ec8237",
			"license": "MIT",
			"urls": [
				"bzz-raw://e5b56231388f70822e62ff1f572bf8988378c9e83e3a3f8f25e20f8afa91ee5c",
				"dweb:/ipfs/QmYL4kFprWKzAVsnX7hmNTRyNwKN8iGXyk7HAvSaWA4k8Q"
			]
		},
		"src/libraries/Initializable.sol": {
			"keccak256": "0x679beb44d1a376e5675568c797a3321c04533f160a9d8d1d18707f9a1e256b63",
			"license": "MIT",
			"urls": [
				"bzz-raw://198ba135df4f9d4186688fde01c3b8664385799cc406175cff05a2bb1b914db7",
				"dweb:/ipfs/QmcAcm5BnXjyefoPvbecrtHj8xd9Uvs7sLAQianp2qQ2Th"
			]
		},
		"src/libraries/PoolAddress.sol": {
			"keccak256": "0x6fa77efb91f1537d56d066eab0e9822a53c63903247a23781dc2d847ba375f3d",
			"license": "MIT",
			"urls": [
				"bzz-raw://1655e0627d65b4d9709a4a6baf64b3741ac764890d05c897368f579cdbdc987d",
				"dweb:/ipfs/QmYVbfq2ZKoDd1Jqqdor7KKgnW7gD3uDA1qwUUTaV1FQ7W"
			]
		}
	},
	"version": 1
}